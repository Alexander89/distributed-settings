import { Pond } from '@actyx/pond'
import bEx from 'brace-expansion'
import { Settings as SettingsType, AppSettings, Schema, SettingsFactory } from './index'

/**
 * TEST impl
 */

export const Settings: SettingsFactory = (actyx: Pond): SettingsType => ({
  app: appSettings(actyx),
  listApps: () => Promise.resolve(['app1']),
})

const appSettings =
  (actyx: Pond) =>
  <T>(app: string): AppSettings<T> => ({
    listPeers: () =>
      Promise.resolve(['Win-PC-001', 'Win-PC-002', 'Ipc-M1-001', 'Ipc-M2-001', 'Server-VM1-001']),
    getSchema: <T>(peer: string): Promise<Schema<T> | undefined> =>
      Promise.resolve(
        JSON.stringify({
          default: {},
        }),
      ),

    subscribe: <T>(peer: string, sub: (settings: T | undefined) => boolean): void => {
      setTimeout(() => {
        if (sub({ machineName: 'Machine 1', plcIp: '192.168.199.29' } as any as T)) {
          console.log('setting applied')
        }
      }, 1_000)
      setTimeout(() => {
        if (sub({ machineName: 'Machine 1', plcIp: '192.168.199.30' } as any as T)) {
          console.log('setting applied')
        }
      }, 15_000)
    },
    get: <T>(peer: string): T =>
      ({ machineName: 'Machine 1', plcIp: '192.168.199.29' } as any as T),

    defineSettings: <T>(schema: Schema<T>, defaultSetting: T, migration: unknown): boolean => true,
    verifySettings: <T>(schema: Schema<T>, defaultSetting: T, migration: unknown): boolean => true,
    set: (
      peers: string | string[],
      value: any,
      scope?: string,
      timeout: number = 15000,
    ): Promise<boolean> => {
      const parsedPeers = Array.isArray(peers) ? peers : bEx(peers)
      const parsedScope = scope ? bEx(scope) : undefined
      console.log('set', parsedPeers, parsedScope)
      return Promise.resolve(true)
    },
    unset: (peers: string | string[], scope: string, timeout: number = 15000): Promise<boolean> => {
      const parsedPeers = Array.isArray(peers) ? peers : bEx(peers)
      const parsedScope = scope ? bEx(scope) : undefined
      console.log('unset', parsedPeers, parsedScope)
      return Promise.resolve(true)
    },
  })
